#!/usr/bin/env python
#------------------------------------------------------------------------------#
#  DFTB+: general package for performing fast atomistic simulations            #
#  Copyright (C) 2017  DFTB+ developers group                                  #
#                                                                              #
#  See the LICENSE file for terms of usage and distribution.                   #
#------------------------------------------------------------------------------#
#
'''
Downloads optional external components
'''
from __future__ import print_function
import sys
import os
import optparse
import subprocess as sub
import shutil

USAGE = '''usage: %prog [options] OPTEXT [OPTEXT ...]

Downloads optional external components. Possible choices for OPTEXT: all,
dftd3, slakos.
'''

SCRIPT_DIR = os.path.dirname(sys.argv[0])
EXTERNAL_DIR = os.path.abspath(os.path.join(SCRIPT_DIR, '..', 'external'))
STATUS_FILE = 'status'

STATUS_MISSING = 'missing'
STATUS_OK = 'ok'


class ScriptError(Exception):
    '''Exception raised by the script.'''
    pass


def main():
    '''Main routine.'''

    opts, args = parse_cmdline_args()
    excluded = set(opts.excluded) if opts.excluded is not None else set()
    if 'all' in args:
        externals = GETTERS.keys()
    else:
        externals = args
    for external in externals:
        if external in excluded:
            continue
        getter, destdir = GETTERS[external]
        destdir = os.path.join(EXTERNAL_DIR, destdir)
        if not os.path.isdir(destdir):
            msg = "Directory '{}' does not exist".format(destdir)
            raise ScriptError(msg)
        print('\n*** GETTING EXTERNAL: ', external, 'into', destdir, '\n')
        set_status(destdir, STATUS_MISSING)
        getter(destdir)
        set_status(destdir, STATUS_OK)
        print('\n*** FINISHED GETTING EXTERNAL: ', external)


def parse_cmdline_args():
    '''Parses and returns command line arguments.'''
    parser = optparse.OptionParser(usage=USAGE)
    msg = 'Exclude certain externals (mostly useful when downloading all '\
          'optional externals except a few)'
    parser.add_option(
        '-e', '--exclude', dest='excluded', metavar='EXCLUDED',
        choices=EXTERNALS, default=None, action='append', help=msg)
    opts, args = parser.parse_args()

    argchoices = ['all'] + EXTERNALS
    for arg in args:
        if arg not in argchoices:
            msg = "Invalid optional external '{}'".format(arg)
            parser.error(msg)
    return opts, args


def set_status(destdir, status):
    '''Update status file.'''
    statusfile = os.path.join(destdir, STATUS_FILE)
    with open(statusfile, 'w') as fp:
        fp.write(status)


def get_slakos(destdir):
    '''Downloads and extracts Slater-Koster files.'''

    url = 'https://github.com/dftbplus/testparams/archive/master.tar.gz'
    fname = os.path.join(destdir, 'testparams.tar.gz')
    unpackname = os.path.join(destdir, 'testparams-master')
    targetname = os.path.join(destdir, 'origin')
    if os.path.exists(unpackname):
        shutil.rmtree(unpackname)
    if os.path.exists(targetname):
        shutil.rmtree(targetname)
    download_file(url, fname)
    unpack_file(fname)
    os.remove(fname)
    os.rename(unpackname, targetname)



def get_dftd3(destdir):
    '''Downloads the dftd3 library.'''

    url = 'https://github.com/aradi/dftd3-lib/archive/0.9.tar.gz'
    fname = os.path.join(destdir, '0.9.tar.gz')
    unpackname = os.path.join(destdir, 'dftd3-lib-0.9')
    targetname = os.path.join(destdir, 'origin')
    if os.path.exists(unpackname):
        shutil.rmtree(unpackname)
    if os.path.exists(targetname):
        shutil.rmtree(targetname)
    download_file(url, fname)
    unpack_file(fname)
    os.remove(fname)
    os.rename(unpackname, targetname)


def download_file(url, fname):
    '''Download file (currently via wget)'''
    print('Download: {0} from {1}'.format(fname, url))
    sub.check_call(['wget', '-q', '-O', fname, url])


def unpack_file(fname):
    '''Unpack file (currently via tar)'''
    fdir = os.path.dirname(fname)
    if fname.endswith('.tar.xz'):
        sub.check_call(['tar', '-x', '-J', '-C', fdir, '-f', fname])
    elif fname.endswith('.tar.bz2'):
        sub.check_call(['tar', '-x', '-j', '-C', fdir, '-f', fname])
    elif fname.endswith('.tar.gz'):
        sub.check_call(['tar', '-x', '-z', '-C', fdir, '-f', fname])
    elif fname.endswith('.tar'):
        sub.check_call(['tar', '-x', '-C', fdir, '-f', fname])
    else:
        msg = "File '{}' has unknown archive suffix".format(fname)
        raise ScriptError(msg)


GETTERS = {
    'slakos': (get_slakos, 'slakos'),
    'dftd3': (get_dftd3, 'dftd3')
}
EXTERNALS = list(GETTERS.keys())


if __name__ == '__main__':
    main()
